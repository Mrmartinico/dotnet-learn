//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyRepository
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MyTicketingEntities : DbContext
    {
        public MyTicketingEntities()
            : base("name=MyTicketingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AdditionalInformation_Category> AdditionalInformation_Category { get; set; }
        public virtual DbSet<AdditionalInformation_Value> AdditionalInformation_Value { get; set; }
        public virtual DbSet<AddressType> AddressType { get; set; }
        public virtual DbSet<Alarm> Alarm { get; set; }
        public virtual DbSet<AlarmMessage> AlarmMessage { get; set; }
        public virtual DbSet<AlarmSeverity> AlarmSeverity { get; set; }
        public virtual DbSet<AlarmStatus> AlarmStatus { get; set; }
        public virtual DbSet<AlarmType> AlarmType { get; set; }
        public virtual DbSet<AnnexProductType> AnnexProductType { get; set; }
        public virtual DbSet<AsyncTaskInfo> AsyncTaskInfo { get; set; }
        public virtual DbSet<AuditLogHeader> AuditLogHeader { get; set; }
        public virtual DbSet<BanknoteType> BanknoteType { get; set; }
        public virtual DbSet<BanknoteTypeSale> BanknoteTypeSale { get; set; }
        public virtual DbSet<BlackList> BlackList { get; set; }
        public virtual DbSet<BlackListReason> BlackListReason { get; set; }
        public virtual DbSet<BlackListRestoreReason> BlackListRestoreReason { get; set; }
        public virtual DbSet<Calendar> Calendar { get; set; }
        public virtual DbSet<CalendarItem> CalendarItem { get; set; }
        public virtual DbSet<Card> Card { get; set; }
        public virtual DbSet<CardContractStatus> CardContractStatus { get; set; }
        public virtual DbSet<CardImageItem> CardImageItem { get; set; }
        public virtual DbSet<CardProfile> CardProfile { get; set; }
        public virtual DbSet<CardStatus> CardStatus { get; set; }
        public virtual DbSet<CardType> CardType { get; set; }
        public virtual DbSet<CardTypeMediaType> CardTypeMediaType { get; set; }
        public virtual DbSet<CashBox> CashBox { get; set; }
        public virtual DbSet<CoinTypeSale> CoinTypeSale { get; set; }
        public virtual DbSet<Company> Company { get; set; }
        public virtual DbSet<CompanyAdditionalInformation> CompanyAdditionalInformation { get; set; }
        public virtual DbSet<CompanyBankAccount> CompanyBankAccount { get; set; }
        public virtual DbSet<CompanyPreferredContact> CompanyPreferredContact { get; set; }
        public virtual DbSet<ContactType> ContactType { get; set; }
        public virtual DbSet<Context> Context { get; set; }
        public virtual DbSet<Control> Control { get; set; }
        public virtual DbSet<ControlStatus> ControlStatus { get; set; }
        public virtual DbSet<ControlType> ControlType { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<Customer_OrderAddress> Customer_OrderAddress { get; set; }
        public virtual DbSet<CustomerAdditionalInformation> CustomerAdditionalInformation { get; set; }
        public virtual DbSet<CustomerAddress> CustomerAddress { get; set; }
        public virtual DbSet<CustomerBankAccount> CustomerBankAccount { get; set; }
        public virtual DbSet<CustomerCompany> CustomerCompany { get; set; }
        public virtual DbSet<CustomerContactEmail> CustomerContactEmail { get; set; }
        public virtual DbSet<CustomerContactPhone> CustomerContactPhone { get; set; }
        public virtual DbSet<CustomerCustGroup> CustomerCustGroup { get; set; }
        public virtual DbSet<CustomerDocument> CustomerDocument { get; set; }
        public virtual DbSet<CustomerGroup> CustomerGroup { get; set; }
        public virtual DbSet<CustomerNote> CustomerNote { get; set; }
        public virtual DbSet<CustomerPayer> CustomerPayer { get; set; }
        public virtual DbSet<CustomerProfessionalCategory> CustomerProfessionalCategory { get; set; }
        public virtual DbSet<CustomerProfile> CustomerProfile { get; set; }
        public virtual DbSet<CustomerRelation> CustomerRelation { get; set; }
        public virtual DbSet<CustomerType> CustomerType { get; set; }
        public virtual DbSet<Depositary> Depositary { get; set; }
        public virtual DbSet<Device> Device { get; set; }
        public virtual DbSet<DeviceConfigParam> DeviceConfigParam { get; set; }
        public virtual DbSet<DeviceConfiguration> DeviceConfiguration { get; set; }
        public virtual DbSet<DeviceParam> DeviceParam { get; set; }
        public virtual DbSet<DeviceParamType> DeviceParamType { get; set; }
        public virtual DbSet<DeviceSubType> DeviceSubType { get; set; }
        public virtual DbSet<DeviceType> DeviceType { get; set; }
        public virtual DbSet<DuplicataReason> DuplicataReason { get; set; }
        public virtual DbSet<EquipmentGroup> EquipmentGroup { get; set; }
        public virtual DbSet<EquipmentGroupType> EquipmentGroupType { get; set; }
        public virtual DbSet<Error> Error { get; set; }
        public virtual DbSet<ErrorDescription> ErrorDescription { get; set; }
        public virtual DbSet<ErrorReasonWriteOnMedia> ErrorReasonWriteOnMedia { get; set; }
        public virtual DbSet<ExportedFile> ExportedFile { get; set; }
        public virtual DbSet<ExternalCodePrice> ExternalCodePrice { get; set; }
        public virtual DbSet<FareProductItem> FareProductItem { get; set; }
        public virtual DbSet<FareProductItemCardType> FareProductItemCardType { get; set; }
        public virtual DbSet<FareProductItemCustomer> FareProductItemCustomer { get; set; }
        public virtual DbSet<FareProductItemDescription> FareProductItemDescription { get; set; }
        public virtual DbSet<FareProductItemDeviceSubType> FareProductItemDeviceSubType { get; set; }
        public virtual DbSet<FareProductItemDeviceType> FareProductItemDeviceType { get; set; }
        public virtual DbSet<FareProductItemFineReason> FareProductItemFineReason { get; set; }
        public virtual DbSet<FareProductItemPaymentMethod> FareProductItemPaymentMethod { get; set; }
        public virtual DbSet<FareProductItemProfile> FareProductItemProfile { get; set; }
        public virtual DbSet<FareProductItemReduction> FareProductItemReduction { get; set; }
        public virtual DbSet<FareStop> FareStop { get; set; }
        public virtual DbSet<FareVersion> FareVersion { get; set; }
        public virtual DbSet<FareZone> FareZone { get; set; }
        public virtual DbSet<FileType> FileType { get; set; }
        public virtual DbSet<Fine> Fine { get; set; }
        public virtual DbSet<FineActor> FineActor { get; set; }
        public virtual DbSet<FineActorType> FineActorType { get; set; }
        public virtual DbSet<FineAddress> FineAddress { get; set; }
        public virtual DbSet<FineCancellationReason> FineCancellationReason { get; set; }
        public virtual DbSet<FineReason> FineReason { get; set; }
        public virtual DbSet<FineStatus> FineStatus { get; set; }
        public virtual DbSet<Function> Function { get; set; }
        public virtual DbSet<FunctionDeviceType> FunctionDeviceType { get; set; }
        public virtual DbSet<Gemalto> Gemalto { get; set; }
        public virtual DbSet<GemaltoConfigurationType> GemaltoConfigurationType { get; set; }
        public virtual DbSet<GemaltoErrorType> GemaltoErrorType { get; set; }
        public virtual DbSet<GemaltoExportStatus> GemaltoExportStatus { get; set; }
        public virtual DbSet<Gender> Gender { get; set; }
        public virtual DbSet<GeographicalRestriction> GeographicalRestriction { get; set; }
        public virtual DbSet<GreenList> GreenList { get; set; }
        public virtual DbSet<GreenListErrorOnMedia> GreenListErrorOnMedia { get; set; }
        public virtual DbSet<GreyList> GreyList { get; set; }
        public virtual DbSet<GreyListActionType> GreyListActionType { get; set; }
        public virtual DbSet<GreyListErrorOnMedia> GreyListErrorOnMedia { get; set; }
        public virtual DbSet<GreyListReason> GreyListReason { get; set; }
        public virtual DbSet<GroupType> GroupType { get; set; }
        public virtual DbSet<HighCapacityReload> HighCapacityReload { get; set; }
        public virtual DbSet<ImportedFile> ImportedFile { get; set; }
        public virtual DbSet<IncompatibilityMatrix> IncompatibilityMatrix { get; set; }
        public virtual DbSet<Installment> Installment { get; set; }
        public virtual DbSet<InstallmentConfiguration> InstallmentConfiguration { get; set; }
        public virtual DbSet<InstallmentDetail> InstallmentDetail { get; set; }
        public virtual DbSet<InstallmentPlanStatus> InstallmentPlanStatus { get; set; }
        public virtual DbSet<InstallmentRejectReason> InstallmentRejectReason { get; set; }
        public virtual DbSet<InstallmentRenewed> InstallmentRenewed { get; set; }
        public virtual DbSet<InstallmentStatus> InstallmentStatus { get; set; }
        public virtual DbSet<InstallmentStatusReason> InstallmentStatusReason { get; set; }
        public virtual DbSet<InventoryItem> InventoryItem { get; set; }
        public virtual DbSet<Itinerary> Itinerary { get; set; }
        public virtual DbSet<ItineraryStop> ItineraryStop { get; set; }
        public virtual DbSet<Language> Language { get; set; }
        public virtual DbSet<Line> Line { get; set; }
        public virtual DbSet<LineTopology> LineTopology { get; set; }
        public virtual DbSet<Location> Location { get; set; }
        public virtual DbSet<MaintenanceAction> MaintenanceAction { get; set; }
        public virtual DbSet<MaritalStatusType> MaritalStatusType { get; set; }
        public virtual DbSet<MediaType> MediaType { get; set; }
        public virtual DbSet<NoteType> NoteType { get; set; }
        public virtual DbSet<Operator> Operator { get; set; }
        public virtual DbSet<OperatorOperatorProfile> OperatorOperatorProfile { get; set; }
        public virtual DbSet<OperatorPassword> OperatorPassword { get; set; }
        public virtual DbSet<OperatorProfile> OperatorProfile { get; set; }
        public virtual DbSet<OperatorProfileOperatorRole> OperatorProfileOperatorRole { get; set; }
        public virtual DbSet<OperatorRole> OperatorRole { get; set; }
        public virtual DbSet<OperatorStation> OperatorStation { get; set; }
        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<Order_detail> Order_detail { get; set; }
        public virtual DbSet<Order_status> Order_status { get; set; }
        public virtual DbSet<OrderDetail_Document> OrderDetail_Document { get; set; }
        public virtual DbSet<OriginDestinationPrice> OriginDestinationPrice { get; set; }
        public virtual DbSet<OriginDestinationRestriction> OriginDestinationRestriction { get; set; }
        public virtual DbSet<Payment> Payment { get; set; }
        public virtual DbSet<PaymentMethod> PaymentMethod { get; set; }
        public virtual DbSet<PaymentOrder> PaymentOrder { get; set; }
        public virtual DbSet<PeopleTitleType> PeopleTitleType { get; set; }
        public virtual DbSet<PeriodType> PeriodType { get; set; }
        public virtual DbSet<PostPayment> PostPayment { get; set; }
        public virtual DbSet<PostPaymentConfig> PostPaymentConfig { get; set; }
        public virtual DbSet<PostPaymentRule> PostPaymentRule { get; set; }
        public virtual DbSet<PreferredContactType> PreferredContactType { get; set; }
        public virtual DbSet<Price> Price { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<ProductFamily> ProductFamily { get; set; }
        public virtual DbSet<ProfessionalCategoryType> ProfessionalCategoryType { get; set; }
        public virtual DbSet<Profile> Profile { get; set; }
        public virtual DbSet<ProfileCard> ProfileCard { get; set; }
        public virtual DbSet<ProfileDescription> ProfileDescription { get; set; }
        public virtual DbSet<ProfileType> ProfileType { get; set; }
        public virtual DbSet<ProfileValidityType> ProfileValidityType { get; set; }
        public virtual DbSet<Provider> Provider { get; set; }
        public virtual DbSet<PublishedContext> PublishedContext { get; set; }
        public virtual DbSet<Reduction> Reduction { get; set; }
        public virtual DbSet<Refund> Refund { get; set; }
        public virtual DbSet<RegularizedFine> RegularizedFine { get; set; }
        public virtual DbSet<RelationType> RelationType { get; set; }
        public virtual DbSet<Revenue> Revenue { get; set; }
        public virtual DbSet<RevenueStatus> RevenueStatus { get; set; }
        public virtual DbSet<RoundType> RoundType { get; set; }
        public virtual DbSet<Sale> Sale { get; set; }
        public virtual DbSet<SaleDetail> SaleDetail { get; set; }
        public virtual DbSet<SaleStatus> SaleStatus { get; set; }
        public virtual DbSet<SaleType> SaleType { get; set; }
        public virtual DbSet<School> School { get; set; }
        public virtual DbSet<SchoolLevel> SchoolLevel { get; set; }
        public virtual DbSet<SchoolType> SchoolType { get; set; }
        public virtual DbSet<Session> Session { get; set; }
        public virtual DbSet<SessionAction> SessionAction { get; set; }
        public virtual DbSet<SessionActionType> SessionActionType { get; set; }
        public virtual DbSet<SessionCashBoxRemove> SessionCashBoxRemove { get; set; }
        public virtual DbSet<SessionHighCapacityReload> SessionHighCapacityReload { get; set; }
        public virtual DbSet<SessionMaintenance> SessionMaintenance { get; set; }
        public virtual DbSet<SessionRecycleReload> SessionRecycleReload { get; set; }
        public virtual DbSet<SessionStatus> SessionStatus { get; set; }
        public virtual DbSet<SessionType> SessionType { get; set; }
        public virtual DbSet<Station> Station { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<StockEntity> StockEntity { get; set; }
        public virtual DbSet<StockEntityDetail> StockEntityDetail { get; set; }
        public virtual DbSet<StockEntityType> StockEntityType { get; set; }
        public virtual DbSet<StockImportedFile> StockImportedFile { get; set; }
        public virtual DbSet<StockItem> StockItem { get; set; }
        public virtual DbSet<StockMovement> StockMovement { get; set; }
        public virtual DbSet<StockMovementStatus> StockMovementStatus { get; set; }
        public virtual DbSet<StockType> StockType { get; set; }
        public virtual DbSet<Stop> Stop { get; set; }
        public virtual DbSet<SupportDocument> SupportDocument { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TaskStatus> TaskStatus { get; set; }
        public virtual DbSet<Tax> Tax { get; set; }
        public virtual DbSet<TemporalRestriction> TemporalRestriction { get; set; }
        public virtual DbSet<Ticket> Ticket { get; set; }
        public virtual DbSet<TicketPrejudice> TicketPrejudice { get; set; }
        public virtual DbSet<TicketPrejudiceStatus> TicketPrejudiceStatus { get; set; }
        public virtual DbSet<TimeRange> TimeRange { get; set; }
        public virtual DbSet<TimeTable> TimeTable { get; set; }
        public virtual DbSet<Topology> Topology { get; set; }
        public virtual DbSet<TopologyCalendar> TopologyCalendar { get; set; }
        public virtual DbSet<TopologyCalendarTopology> TopologyCalendarTopology { get; set; }
        public virtual DbSet<TopologyCategory> TopologyCategory { get; set; }
        public virtual DbSet<TopologyPeriod> TopologyPeriod { get; set; }
        public virtual DbSet<TopologyVersion> TopologyVersion { get; set; }
        public virtual DbSet<ToponymType> ToponymType { get; set; }
        public virtual DbSet<TransCityParameter> TransCityParameter { get; set; }
        public virtual DbSet<Translation> Translation { get; set; }
        public virtual DbSet<Travel> Travel { get; set; }
        public virtual DbSet<Validation> Validation { get; set; }
        public virtual DbSet<ValidationRejectReason> ValidationRejectReason { get; set; }
        public virtual DbSet<ValidationStatus> ValidationStatus { get; set; }
        public virtual DbSet<ValidityType> ValidityType { get; set; }
        public virtual DbSet<Vehicle> Vehicle { get; set; }
        public virtual DbSet<VehicleType> VehicleType { get; set; }
        public virtual DbSet<WeekDay> WeekDay { get; set; }
        public virtual DbSet<ZonalPrice> ZonalPrice { get; set; }
        public virtual DbSet<ZonalRestriction> ZonalRestriction { get; set; }
        public virtual DbSet<ControlExportView> ControlExportView { get; set; }
        public virtual DbSet<SaleExportView> SaleExportView { get; set; }
        public virtual DbSet<ScadaAlarms> ScadaAlarms { get; set; }
        public virtual DbSet<ScadaDevices> ScadaDevices { get; set; }
        public virtual DbSet<ScadaOperators> ScadaOperators { get; set; }
        public virtual DbSet<ValidationExportView> ValidationExportView { get; set; }
        public virtual DbSet<VwAutomaticPayment> VwAutomaticPayment { get; set; }
        public virtual DbSet<VwTaciteReconduction> VwTaciteReconduction { get; set; }
        public virtual DbSet<VwTitanRecettePayment> VwTitanRecettePayment { get; set; }
        public virtual DbSet<VwTitanRecetteSale> VwTitanRecetteSale { get; set; }
        public virtual DbSet<VwVcub> VwVcub { get; set; }
    
        public virtual int CloneFareVersionById(Nullable<long> oldFareVersionId, Nullable<long> newFareVersionId)
        {
            var oldFareVersionIdParameter = oldFareVersionId.HasValue ?
                new ObjectParameter("OldFareVersionId", oldFareVersionId) :
                new ObjectParameter("OldFareVersionId", typeof(long));
    
            var newFareVersionIdParameter = newFareVersionId.HasValue ?
                new ObjectParameter("NewFareVersionId", newFareVersionId) :
                new ObjectParameter("NewFareVersionId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CloneFareVersionById", oldFareVersionIdParameter, newFareVersionIdParameter);
        }
    
        public virtual int CloneTopologyById(Nullable<long> oldTopologyId, Nullable<long> newTopologyId)
        {
            var oldTopologyIdParameter = oldTopologyId.HasValue ?
                new ObjectParameter("OldTopologyId", oldTopologyId) :
                new ObjectParameter("OldTopologyId", typeof(long));
    
            var newTopologyIdParameter = newTopologyId.HasValue ?
                new ObjectParameter("NewTopologyId", newTopologyId) :
                new ObjectParameter("NewTopologyId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CloneTopologyById", oldTopologyIdParameter, newTopologyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CountCardInStockEntityDetailById(Nullable<long> stockEntityDetailId)
        {
            var stockEntityDetailIdParameter = stockEntityDetailId.HasValue ?
                new ObjectParameter("StockEntityDetailId", stockEntityDetailId) :
                new ObjectParameter("StockEntityDetailId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CountCardInStockEntityDetailById", stockEntityDetailIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CountCardInStockMovementById(Nullable<long> stockMovementId)
        {
            var stockMovementIdParameter = stockMovementId.HasValue ?
                new ObjectParameter("StockMovementId", stockMovementId) :
                new ObjectParameter("StockMovementId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CountCardInStockMovementById", stockMovementIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CountTicketInStockEntityDetailById(Nullable<long> stockEntityDetailId)
        {
            var stockEntityDetailIdParameter = stockEntityDetailId.HasValue ?
                new ObjectParameter("StockEntityDetailId", stockEntityDetailId) :
                new ObjectParameter("StockEntityDetailId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CountTicketInStockEntityDetailById", stockEntityDetailIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CountTicketInStockMovementById(Nullable<long> stockMovementId)
        {
            var stockMovementIdParameter = stockMovementId.HasValue ?
                new ObjectParameter("StockMovementId", stockMovementId) :
                new ObjectParameter("StockMovementId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CountTicketInStockMovementById", stockMovementIdParameter);
        }
    
        public virtual int DeleteFareVersionChildrenById(Nullable<long> fareVersionId)
        {
            var fareVersionIdParameter = fareVersionId.HasValue ?
                new ObjectParameter("FareVersionId", fareVersionId) :
                new ObjectParameter("FareVersionId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFareVersionChildrenById", fareVersionIdParameter);
        }
    
        public virtual int DeleteStockMovementById(Nullable<long> stockMovementId)
        {
            var stockMovementIdParameter = stockMovementId.HasValue ?
                new ObjectParameter("StockMovementId", stockMovementId) :
                new ObjectParameter("StockMovementId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStockMovementById", stockMovementIdParameter);
        }
    
        public virtual int DeleteStockSupplyById(Nullable<long> stockMovementId)
        {
            var stockMovementIdParameter = stockMovementId.HasValue ?
                new ObjectParameter("StockMovementId", stockMovementId) :
                new ObjectParameter("StockMovementId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStockSupplyById", stockMovementIdParameter);
        }
    
        public virtual int DeleteTopologyChildrenById(Nullable<long> topologyId)
        {
            var topologyIdParameter = topologyId.HasValue ?
                new ObjectParameter("TopologyId", topologyId) :
                new ObjectParameter("TopologyId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTopologyChildrenById", topologyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> IsGreyStable(Nullable<long> cardId, Nullable<long> fareProductItemId, Nullable<long> tcn)
        {
            var cardIdParameter = cardId.HasValue ?
                new ObjectParameter("CardId", cardId) :
                new ObjectParameter("CardId", typeof(long));
    
            var fareProductItemIdParameter = fareProductItemId.HasValue ?
                new ObjectParameter("FareProductItemId", fareProductItemId) :
                new ObjectParameter("FareProductItemId", typeof(long));
    
            var tcnParameter = tcn.HasValue ?
                new ObjectParameter("Tcn", tcn) :
                new ObjectParameter("Tcn", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("IsGreyStable", cardIdParameter, fareProductItemIdParameter, tcnParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
